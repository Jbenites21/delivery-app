"""
Script de prueba para la integraci√≥n con Redis
Ejecuta este script para probar las funcionalidades b√°sicas
"""

import asyncio
import httpx
import json


BASE_URL = "http://localhost:8000"


async def test_api():
    """Prueba b√°sica de la API con Redis"""
    
    async with httpx.AsyncClient() as client:
        print("üß™ Iniciando pruebas de la API con Redis...\n")
        
        # 1. Verificar que la API est√© funcionando
        print("1Ô∏è‚É£ Verificando estado de la API...")
        try:
            response = await client.get(f"{BASE_URL}/")
            print(f"‚úÖ API Status: {response.json()}")
        except Exception as e:
            print(f"‚ùå Error conectando con la API: {e}")
            return
        
        # 2. Verificar health check
        print("\n2Ô∏è‚É£ Verificando health check...")
        try:
            response = await client.get(f"{BASE_URL}/health")
            health_data = response.json()
            print(f"‚úÖ Health Check: {health_data}")
            
            if not health_data.get("redis_connected"):
                print("‚ö†Ô∏è Redis no est√° conectado. Aseg√∫rate de que Redis est√© ejecut√°ndose.")
                return
                
        except Exception as e:
            print(f"‚ùå Error en health check: {e}")
            return
        
        # 3. Probar registro de usuario
        print("\n3Ô∏è‚É£ Probando registro de usuario...")
        register_data = {
            "nombre": "Juan P√©rez",
            "email": "juan@ejemplo.com",
            "password": "mipassword123"
        }
        
        try:
            response = await client.post(f"{BASE_URL}/registrar", json=register_data)
            register_result = response.json()
            print(f"‚úÖ Registro: {register_result}")
            
            if register_result.get("status"):
                token = register_result.get("token")
                print(f"üîë Token obtenido: {token[:20]}...")
            else:
                print("‚ùå Fallo en el registro")
                return
                
        except Exception as e:
            print(f"‚ùå Error en registro: {e}")
            return
        
        # 4. Probar login
        print("\n4Ô∏è‚É£ Probando login...")
        login_data = {
            "email": "juan@ejemplo.com",
            "password": "mipassword123"
        }
        
        try:
            response = await client.post(f"{BASE_URL}/login", json=login_data)
            login_result = response.json()
            print(f"‚úÖ Login: {login_result}")
            
            if login_result.get("status"):
                login_token = login_result.get("token")
                print(f"üîë Nuevo token: {login_token[:20]}...")
            else:
                print("‚ùå Fallo en el login")
                return
                
        except Exception as e:
            print(f"‚ùå Error en login: {e}")
            return
        
        # 5. Probar obtener perfil
        print("\n5Ô∏è‚É£ Probando obtener perfil...")
        try:
            response = await client.get(f"{BASE_URL}/profile/{login_token}")
            profile_result = response.json()
            print(f"‚úÖ Perfil: {json.dumps(profile_result, indent=2)}")
            
        except Exception as e:
            print(f"‚ùå Error obteniendo perfil: {e}")
        
        # 6. Probar estad√≠sticas de Redis
        print("\n6Ô∏è‚É£ Probando estad√≠sticas de Redis...")
        try:
            response = await client.get(f"{BASE_URL}/redis/stats")
            stats_result = response.json()
            print(f"‚úÖ Estad√≠sticas Redis: {json.dumps(stats_result, indent=2)}")
            
        except Exception as e:
            print(f"‚ùå Error obteniendo estad√≠sticas: {e}")
        
        # 7. Probar logout
        print("\n7Ô∏è‚É£ Probando logout...")
        try:
            response = await client.post(f"{BASE_URL}/logout", json={"token": login_token})
            logout_result = response.json()
            print(f"‚úÖ Logout: {logout_result}")
            
        except Exception as e:
            print(f"‚ùå Error en logout: {e}")
        
        print("\nüéâ Pruebas completadas!")


if __name__ == "__main__":
    print("Para ejecutar este script:")
    print("1. Aseg√∫rate de que Redis est√© ejecut√°ndose")
    print("2. Ejecuta la API: uvicorn main:app --reload")
    print("3. Ejecuta: python test_redis.py")
    print("\nO puedes probar manualmente con curl o un cliente HTTP como Postman")
    
    # Descomenta la siguiente l√≠nea para ejecutar las pruebas autom√°ticamente
    # asyncio.run(test_api())
